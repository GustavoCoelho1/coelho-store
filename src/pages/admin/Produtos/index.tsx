import { motion } from 'framer-motion';
import LoadingPage from 'components/common/ui/LoadingPage';
import Table from 'components/common/ui/DataTable';
import Card from 'components/common/ui/Card';

import {
    BiAddToQueue,
    BiArrowBack,
    BiEdit,
    BiGift,
    BiStore,
} from 'react-icons/bi';
import { MdRemoveCircleOutline } from 'react-icons/md';

import Head from 'next/head';
import ActionButton from 'components/common/ui/ActionButton';
import IcontTitle from 'components/common/ui/IconTitle';
import { FiClock } from 'react-icons/fi';
import { MdManageAccounts } from 'react-icons/md';
import { NextPage } from 'next';
import Modal from 'components/common/ui/Modal';
import { useEffect, useState } from 'react';
import GQLClient from 'libs/apollo';
import Router from 'next/router';
import { iProduto } from 'types/Produto';
import DeletarProdutoForm from 'components/admin/Produtos/DeleteProduto';
import { gql } from '@apollo/client';

const TODOS_PRODUTOS = gql`
    query {
        TODOS_PRODUTOS: allProdutos {
            prod_cod
            prod_nome
            prod_estoque
            prod_descricao
            prod_preco
            prod_codbarra
        }
    }
`;

const columns = [
    { field: 'id', headerName: 'ID', width: 100 },
    { field: 'nome', headerName: 'Produto', width: 150 },
    { field: 'preco', headerName: 'Preço', width: 100 },
    { field: 'estoque', headerName: 'Estoque', width: 100 },
    { field: 'descricao', headerName: 'Descrição', width: 200 },
    { field: 'codbarra', headerName: 'Cód. Barra', width: 150 },
];

interface AuthProps {
    auth: {
        role: string;
        loading: JSX.Element;
        unauthorized: string;
    };
}

const Produtos: NextPage & AuthProps = () => {
    const [modalVisible, setModalVisible] = useState(false);
    const [modalContent, setModalContent] = useState<JSX.Element>();

    const [tableData, setTableData] = useState<any[]>([{ id: '', nome: '' }]);
    const [updateTable, setUpdateTable] = useState(false);

    const handleAddClick = () => {
        Router.push('/admin/Produtos/AddProduto');
    };

    const handleAlterClick = () => {
        Router.push('/admin/Produtos/AlterProduto');
    };

    const handleDelClick = () => {
        setModalContent(
            <DeletarProdutoForm
                setUpdate={setUpdateTable}
                setVisible={setModalVisible}
            />,
        );
        setModalVisible(true);
    };

    const updateTableData = async () => {
        const { data: produtoData } = await GQLClient.query({
            query: TODOS_PRODUTOS,
        }).finally(() => {
            GQLClient.clearStore();
        }); //Limpando o cache para forçar uma nova requisição

        const produtos = produtoData?.TODOS_PRODUTOS;

        if (produtos) {
            const produtosSerialized = produtos.map((produto: iProduto) => {
                return {
                    id: produto.prod_cod,
                    nome: produto.prod_nome,
                    preco: produto.prod_preco,
                    estoque: produto.prod_estoque,
                    codbarra: produto.prod_codbarra,
                    descricao: produto.prod_descricao,
                };
            });

            return produtosSerialized;
        }
    };

    useEffect(() => setUpdateTable(true), []);

    useEffect(() => {
        if (updateTable === true) {
            updateTableData().then((newRows) => {
                setTableData(newRows);
                setUpdateTable(false);
            });
        }
    }, [updateTable]);

    return (
        <>
            <Head>
                <title>Admin Dashboard</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <motion.div
                exit={{ opacity: 0 }}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.3 }}
                className="flex w-full justify-center bg-violet-100 sm:py-10"
            >
                <Card width="w-10/12 justify-start">
                    <div className="flex w-full flex-col items-center">
                        <span className="my-4 flex items-center text-3xl text-violet-600 sm:mb-0 sm:mt-2">
                            <BiGift className="mr-3" />
                            <span>Produtos</span>
                        </span>

                        <div className="my-8 h-0.5 w-4/6 rounded-xl bg-violet-200" />

                        <div>
                            <IcontTitle
                                icon={<MdManageAccounts />}
                                title="Gerenciamento"
                            />

                            <div className="mt-6 flex">
                                <div
                                    onClick={() => handleAddClick()}
                                    className="mx-4 sm:mx-8"
                                >
                                    <ActionButton
                                        icon={<BiAddToQueue />}
                                        title={'Adicionar'}
                                    />
                                </div>
                                <div
                                    onClick={() => handleAlterClick()}
                                    className="mx-4 sm:mx-8"
                                >
                                    <ActionButton
                                        icon={<BiEdit />}
                                        title={'Alterar'}
                                    />
                                </div>
                                <div
                                    onClick={() => handleDelClick()}
                                    className="mx-4 sm:mx-8"
                                >
                                    <ActionButton
                                        icon={<MdRemoveCircleOutline />}
                                        title={'Remover'}
                                    />
                                </div>
                            </div>
                        </div>

                        <div className="my-8 h-0.5 w-4/6 rounded-xl bg-violet-200" />

                        <div className="flex w-11/12 flex-col items-center">
                            <IcontTitle
                                icon={<FiClock />}
                                title={'Últimos produtos'}
                            />
                            <Table columns={columns} rows={tableData} />
                        </div>
                    </div>
                </Card>
            </motion.div>

            <Modal
                show={modalVisible}
                handleClose={() => setModalVisible(false)}
            >
                {modalContent}
            </Modal>
        </>
    );
};

Produtos.auth = {
    role: 'admin',
    loading: <LoadingPage />,
    unauthorized: '/Login',
};

export default Produtos;
